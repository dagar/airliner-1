extends ../../common/layout

block header
        i.fa-fw.fa.fa-signal
        | PX4

block main
    .row.row-fluid

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6
        #wid-SM.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Sensor - Magnetometer
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              #Magnetometer(style='width:100%; height:300px;')

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6(style='max-width:450px')
        #wid-SM.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Sensor - Magnetometer
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
                table.table.table-hover.table-condensed.table-compressed
                  tbody
                    tr
                      th Error Count:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_ErrorCount"}}) ---
                    tr
                      th X:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_X"}}) ---
                    tr
                      th Y:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_Y"}}) ---
                    tr
                      th Z:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_Z"}}) ---
                    tr
                      th Range:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_Range"}}) ---
                    tr
                      th Scaling:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_Scaling"}}) ---
                    tr
                      th Temp:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_Temp"}}) ---
                    tr
                      th Device ID:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_DeviceID"}}) ---
                    tr
                      th X Raw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_XRaw"}}) ---
                    tr
                      th Y Raw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_YRaw"}}) ---
                    tr
                      th Z Raw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SM_ZRaw"}}) ---

    .row.row-fluid

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6
        #wid-SM.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Sensor - Accelerometer
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              #Accelerometer(style='width:100%; height:300px;')

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6(style='max-width:450px')
        #wid-SA.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Sensor - Accelerometer
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              .table-responsive
                table.table.table-condensed
                  tbody
                    tr
                      th Integral:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_Integral"}}) ---
                    tr
                      th ErrorCount:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_ErrorCount"}}) ---
                    tr
                      th X:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_X"}}) ---
                    tr
                      th Y:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_Y"}}) ---
                    tr
                      th Z:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_Z"}}) ---
                    tr
                      th XInt:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_XInt"}}) ---
                    tr
                      th YInt:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_YInt"}}) ---
                    tr
                      th ZInt:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_ZInt"}}) ---
                    tr
                      th Temp:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_Temp"}}) ---
                    tr
                      th Range:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_Range"}}) ---
                    tr
                      th Scaling:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_Scaling"}}) ---
                    tr
                      th DeviceID:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_DeviceID"}}) ---
                    tr
                      th XRaw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_XRaw"}}) ---
                    tr
                      th YRaw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_YRaw"}}) ---
                    tr
                      th ZRaw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_ZRaw"}}) ---
                    tr
                      th TempRaw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SA_TempRaw"}}) ---

    .row.row-fluid

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6
        #wid-SM.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Sensor - Baro
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              #Baro(style='width:100%; height:300px;')

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6(style='max-width:450px')
        #wid-SB.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Sensor - Baro
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              .table-responsive
                table.table.table-condensed
                  tbody
                    tr
                      th Error Count:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SB_ErrorCount"}}) ---
                    tr
                      th Pressure:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SB_Press"}}) ---
                    tr
                      th Altitude:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SB_Alt"}}) ---
                    tr
                      th Temperature:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SB_Temp"}}) ---

    .row.row-fluid

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6
        #wid-SM.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Sensor - Gyro
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              #Gyro(style='width:100%; height:300px;')

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6(style='max-width:450px')
        #wid-SG.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Sensor - Gyro
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              .table-responsive
                table.table.table-condensed
                  tbody
                    tr
                      th Integral:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_Integral"}}) ---
                    tr
                      th Error Count:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_ErrorCount"}}) ---
                    tr
                      th X:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_X"}}) ---
                    tr
                      th Y:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_Y"}}) ---
                    tr
                      th Z:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_Z"}}) ---
                    tr
                      th X Int:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_XInt"}}) ---
                    tr
                      th Y Int:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_YInt"}}) ---
                    tr
                      th Z Int:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_ZInt"}}) ---
                    tr
                      th Temp:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_Temp"}}) ---
                    tr
                      th Range:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_Range"}}) ---
                    tr
                      th Scaling:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_Scaling"}}) ---
                    tr
                      th Device ID:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_DeviceID"}}) ---
                    tr
                      th X Raw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_XRaw"}}) ---
                    tr
                      th Y Raw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_YRaw"}}) ---
                    tr
                      th Z Raw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_ZRaw"}}) ---
                    tr
                      th Temp Raw:
                      td
                        span(data-sage={tlm: {name: "/CFS/PX4/SG_TempRaw"}}) ---

    .row.row-fluid

      article.col-xs-10.col-sm-6.col-md-6.col-lg-6(style='max-width:450px')
        #wid-Misc.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Misc
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              footer
                .btn-group.btn-space
                  button.btn.btn-primary(data-sage={cmd: {name: '/CFS/PX4/NoOp'}}) No-Op
                  button.btn.btn-primary(data-sage={cmd: {name: '/CFS/PX4/Reset'}}) Reset
                  button.btn.btn-primary(data-sage={cmd: {name: '/CFS/PX4/VehicleArm'}}) Arm
                  button.btn.btn-primary(data-sage={cmd: {name: '/CFS/PX4/VehicleDisarm'}}) Disarm
                  button.btn.btn-primary(data-sage={cmd: {name: '/CFS/PX4/VehicleLaunch'}}) Launch
                  button.btn.btn-primary(data-sage={cmd: {name: '/CFS/PX4/VehicleLand'}}) Land
                  button.btn.btn-primary(data-sage={cmd: {name: '/CFS/PX4/VehicleChangeMode'}}) Set Mode

      script.
        var MaxCount = 2500;

        loadScript("js/plugin/dygraphs/dygraph-combined.min.js", function () {
            var AccData = [];
            var GyroData = [];
            var MagData = [];
            var AltData = [];
            var AccX = {value: 0, time: 1, utcTime: ''};
            var AccY = {value: 0, time: 2, utcTime: ''};
            var AccZ = {value: 0, time: 3, utcTime: ''};
            var Alt = {value: 0, time: 1, utcTime: ''};
            var MagX = {value: 0, time: 1, utcTime: ''};
            var MagY = {value: 0, time: 2, utcTime: ''};
            var MagZ = {value: 0, time: 3, utcTime: ''};
            var GyroX = {value: 0, time: 1, utcTime: ''};
            var GyroY = {value: 0, time: 2, utcTime: ''};
            var GyroZ = {value: 0, time: 3, utcTime: ''};
            var AccStarted = false;
            var GyroStarted = false;
            var AltStarted = false;
            var MagStarted = false;

            AccGraph = new Dygraph(document.getElementById("Accelerometer"), AccData, {
                                drawPoints: false,
                                showRoller: true,
                                valueRange: [-20.0, 20.0],
                                labels: ['Time', 'X', 'Y', 'Z']
                         });

            GyroGraph = new Dygraph(document.getElementById("Gyro"), GyroData, {
                                drawPoints: false,
                                showRoller: true,
                                labels: ['Time', 'X', 'Y', 'Z']
                         });

            MagGraph = new Dygraph(document.getElementById("Magnetometer"), MagData, {
                                drawPoints: false,
                                showRoller: true,
                                labels: ['Time', 'X', 'Y', 'Z']
                         });

            AltGraph = new Dygraph(document.getElementById("Baro"), AltData, {
                                drawPoints: false,
                                showRoller: true,
                                labels: ['Time', 'Alt']
                         });

            session.on('connectFailed', function(err) {
                console.log('Failed to start Sage session.  err = ' + err);
            });

            session.on('connect', function() {
              var AccCount = 0;
              var GyroCount = 0;
              var MagCount = 0;
              var AltCount = 0;

              session.subscribe({name: '/CFS/PX4/SA_X'}, function(param) {
                AccX.value = param.engValue.floatValue;
                AccX.time = param.acquisitionTime;
                AccX.utcTime = param.acquisitionTimeUTC;
                AccCorrelateData();
              });

              session.subscribe({name: '/CFS/PX4/SA_Y'}, function(param) {
                AccY.value = param.engValue.floatValue;
                AccY.time = param.acquisitionTime;
                AccY.utcTime = param.acquisitionTimeUTC;
                AccCorrelateData();
              });

              session.subscribe({name: '/CFS/PX4/SA_Z'}, function(param) {
                AccZ.value = param.engValue.floatValue;
                AccZ.time = param.acquisitionTime;
                AccZ.utcTime = param.acquisitionTimeUTC;
                AccCorrelateData();
              });

              session.subscribe({name: '/CFS/PX4/SG_X'}, function(param) {
                GyroX.value = param.engValue.floatValue;
                GyroX.time = param.acquisitionTime;
                GyroX.utcTime = param.acquisitionTimeUTC;
                GyroCorrelateData();
              });

              session.subscribe({name: '/CFS/PX4/SG_Y'}, function(param) {
                GyroY.value = param.engValue.floatValue;
                GyroY.time = param.acquisitionTime;
                GyroY.utcTime = param.acquisitionTimeUTC;
                GyroCorrelateData();
              });

              session.subscribe({name: '/CFS/PX4/SG_Z'}, function(param) {
                GyroZ.value = param.engValue.floatValue;
                GyroZ.time = param.acquisitionTime;
                GyroZ.utcTime = param.acquisitionTimeUTC;
                GyroCorrelateData();
              });

              session.subscribe({name: '/CFS/PX4/SM_X'}, function(param) {
                MagX.value = param.engValue.floatValue;
                MagX.time = param.acquisitionTime;
                MagX.utcTime = param.acquisitionTimeUTC;
                MagCorrelateData();
              });

              session.subscribe({name: '/CFS/PX4/SM_Y'}, function(param) {
                MagY.value = param.engValue.floatValue;
                MagY.time = param.acquisitionTime;
                MagY.utcTime = param.acquisitionTimeUTC;
                MagCorrelateData();
              });

              session.subscribe({name: '/CFS/PX4/SM_Z'}, function(param) {
                MagZ.value = param.engValue.floatValue;
                MagZ.time = param.acquisitionTime;
                MagZ.utcTime = param.acquisitionTimeUTC;
                MagCorrelateData();
              });

              session.subscribe({name: '/CFS/PX4/SB_Alt'}, function(param) {
                    if(AltStarted == false){
                        /* Skip the first one. */
                        AltStarted = true;
                    } else {
                        if (AltData.length >= MaxCount) {
                          AltData = AltData.slice(1);
                        }
                        AltData.push([AltCount, param.engValue.floatValue]);
                        AltCount++;
                    }
              });

              var AccCorrelateData = function () {
                  if((AccX.time == AccY.time ) && ( AccY.time == AccZ.time)){
                      if(AccStarted == false){
                          /* Skip the first one. */
                          AccStarted = true;
                      } else {
                        if (AccData.length >= MaxCount) {
                          AccData = AccData.slice(1);
                        }
                        AccData.push([AccCount, AccX.value, AccY.value, AccZ.value]);
                        AccCount++;
                      }
                  }
              };

              var GyroCorrelateData = function () {
                  if((GyroX.time == GyroY.time ) && ( GyroY.time == GyroZ.time)){
                      if(GyroStarted == false){
                        /* Skip the first one. */
                        GyroStarted = true;
                      } else {
                        if (GyroData.length >= MaxCount) {
                          GyroData = GyroData.slice(1);
                        }
                        GyroData.push([GyroCount, GyroX.value, GyroY.value, GyroZ.value]);
                        GyroCount++;
                      }
                  }
              };

              var MagCorrelateData = function () {
                  if((MagX.time == MagY.time ) && ( MagY.time == MagZ.time)){
                      if(MagStarted == false){
                          /* Skip the first one. */
                          MagStarted = true;
                      } else {
                          if (MagData.length >= MaxCount) {
                              MagData = MagData.slice(1);
                          }
                          MagData.push([MagCount, MagX.value, MagY.value, MagZ.value]);
                          MagCount++;
                      }
                  }
              };

             setInterval(function() {
                 AccGraph.updateOptions( { 'file': AccData } );
                 GyroGraph.updateOptions( { 'file': GyroData } );
                 MagGraph.updateOptions( { 'file': MagData } );
                 AltGraph.updateOptions( { 'file': AltData } );
             }, 100);
          });
        });
