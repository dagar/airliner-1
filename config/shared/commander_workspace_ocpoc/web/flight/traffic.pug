extends ../../web_includes/common/layout

block includes
  include ../../web_includes/common/common_includes.pug


block header
  i.fa-fw.fa.fa-signal
  | Pilot Display (Test)


block header
  i.fa-fw.fa.fa-signal
  | Pilot Display (Test)

block main 
  .row
    article.col-xs-12.col-sm-12.col-md-6.col-lg-6
      #wid-map.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false',data-widget-colorbutton='false',data-widget-deletebutton='false')
        header
          span.widget-icon
            i.fa.fa-table
          h2 Map
        div
          .jarviswidget-editbox
            input.form-control(type='text')
          .widget-body
            style.
              @import url(bower_components/cesium/Source/Widgets/widgets.css);
            #cesiumContainer.fullSize
    .row.row-fluid
      article.col-xs-10.col-sm-6.col-md-6.col-lg-6(style="max-width:450px")
        #wid-SA.jarviswidget.jarviswidget-color-blueDark(data-widget-editbutton='false')
          header(style="overflow:hidden;")
            span.widget-icon
              i.fa.fa-table
            h2 Vehicle Global Position
          div
            .jarviswidget-editbox
              input.form-control(type='text')
            .widget-body
              .table-responsive
                table.table.table-condensed
                  tbody
                    tr
                      th Timestamp:
                      td
                        span#ts ---
                    tr
                      th Lat:
                      td
                        span#lat ---
                    tr
                      th Lon:
                      td
                        span#lon ---
                    tr
                      th Altitude:
                      td
                        span#alt ---
                    tr
                      th Satellites Used:
                      td
                        span#sat ---

  script.
  
  
    session.subscribe({tlm: [{'name': '/CFS/PX4/VGP_Timestamp'}]}, function (param) {
        $("#ts").text(param.engValue.uint32Value);
    });
    session.subscribe({tlm: [{'name': '/CFS/PX4/VGP_Lat'}]}, function (param) {
        $("#lat").text(param.engValue.floatValue);
    });
    session.subscribe({tlm: [{'name': '/CFS/PX4/VGP_Lon'}]}, function (param) {
        $("#lon").text(param.engValue.floatValue);
    });
    session.subscribe({tlm: [{'name': '/CFS/PX4/VGP_PressureAlt'}]}, function (param) {
        $("#alt").text(param.engValue.floatValue);
    });
    session.subscribe({tlm: [{'name': '/CFS/PX4/VGPP_SatellitesUsed'}]}, function (param) {
        $("#sat").text(param.engValue.uint32Value);
    });
    loadScript('node_modules/cesium/Build/CesiumUnminified/Cesium.js',function(){
                                
      Cesium.BingMapsApi.defaultKey = 'Anb5ZQS9_Qvje--nom_9ZKwQyQVnOOU04Fctd1uxMHnYoQKIcp1XFDrZuXN6evOQ';
      var viewer = new Cesium.Viewer('cesiumContainer');
      var AIRCRAFT = {};
      var HISTORY = {} ;
      var ALLMYLINES = [];                    
      var tracking_step_limit = 200;
      var outdated_seconds = 30;
      
      function AddMyVehicle(){
        var lat = parseFloat($("#lat").text());
        var lon = parseFloat($("#lon").text());
        var alt = parseFloat($("#alt").text());
        mystruct = {};
        mystruct.lat  = lat;
        mystruct.lon  = lon;
        mystruct.altitude  = alt;
        mystruct.hex  = "MYVEH";
        mystruct.lat  = lat;
        return mystruct;    
      }
      
      function DrawLines(){
        for(var k in AIRCRAFT){
          var this_aircraft = AIRCRAFT[k];
          var my_arr = [];
          for(var i  = 0; i< this_aircraft.length;i++){
            my_arr.push(this_aircraft[i].la);
            my_arr.push(this_aircraft[i].lo);
            my_arr.push(this_aircraft[i].h);
          }
          if(k == "MYVEH"){
            var key = AddMainLine(my_arr);
          }else{
            var key = AddLine(my_arr);
          }
          ALLMYLINES.push(key);
        }
        
      
      
      
      }
         
      function PrepareRoute(lo,la,h,t,hex){
        var current = {lo:lo,la:la,h:h,t:t};
        if(!(hex in AIRCRAFT)){
          //Fresh point
          var PQ = [];
          if(hex == "MYVEH"){
            var key = AddMainPoint(lo,la,h);
          }else{
            var key = AddPoint(lo,la,h);
          }
          current.key = key;
          PQ.push(current);
          AIRCRAFT[hex]=PQ;
         
        }else{
          //Existing Point
          PQ = AIRCRAFT[hex];
          if(hex == "MYVEH"){
            var key = AddMainPoint(lo,la,h);
          }else{
            var key = AddPoint(lo,la,h);
          }
          current.key = key;
 
          //Check tail length
          if(PQ.length >tracking_step_limit){
            var element_to_rm = PQ[0].key;
            RemovePoint(element_to_rm);
            PQ.shift();
          }
          PQ.push(current);
          AIRCRAFT[hex] = PQ;
        }
        
      }

      function AddLine(arr){
        var dashedLine = viewer.entities.add({
          polyline : {
            positions : Cesium.Cartesian3.fromDegreesArrayHeights(arr),
            width : 1,
            material : Cesium.Color.YELLOW
          }
        });
        return  dashedLine.id
      }      
      
      function AddMainLine(arr){
         var dashedLine = viewer.entities.add({
         polyline : {
            positions : Cesium.Cartesian3.fromDegreesArrayHeights(arr),
            width : 1,
            material : Cesium.Color.RED

         }
        });
      return  dashedLine.id
      }  
                          
      function AddPoint(lo,la,h) {
        var position = Cesium.Cartesian3.fromDegrees(la, lo, h);
        var ENTITY = viewer.entities.add({
          position : position,
          point : {
            pixelSize : 10,
            color : Cesium.Color.YELLOW,
            translucencyByDistance : new Cesium.NearFarScalar(1.5e2, 1.0, 1.5e7, 0.2)
          }
        });
        return ENTITY.id;    
      }
      
      function AddMainPoint(lo,la,h) {
        var position = Cesium.Cartesian3.fromDegrees(la, lo, h);
        var ENTITY = viewer.entities.add({
          position : position,
          point : {
            pixelSize : 10,
            color : Cesium.Color.RED,
            translucencyByDistance : new Cesium.NearFarScalar(1.5e2, 1.0, 1.5e7, 0.2)
          }
        });
        return ENTITY.id;    
      }
      
      function CleanSlate(current_time){
        RemovePoints(ALLMYLINES);
        ALLMYLINES = [];
        for(var k in AIRCRAFT){
        var PQ = AIRCRAFT[k];
        if(PQ.length <1){
        return;
        }
        var obj = PQ[PQ.length-1];
        var latest_aircraft_timestamp = obj.t;
        var difference = Math.abs(current_time-latest_aircraft_timestamp);
          if(difference>outdated_seconds){
              for(var i=0;i<PQ.length;i++){
              RemovePoint(PQ[i].key);
              }
              delete AIRCRAFT.k;
          }
        }
      }

      function RemovePoint(entityid){
        var response = viewer.entities.removeById(entityid);
        return response;
      }
      
      function RemovePoints(arr){
        for(var e in arr){
        viewer.entities.removeById(arr[e]);
        } 
      }
     
      function ExecuteQuery(){
        session.getADSBJson(function(adsb){
          //Create common timestamp
          var timestamp = Math.floor(Date.now());
          
          // Copy vehicle information into rendering queue
          var vh = AddMyVehicle();
          adsb.push(vh);
          
          //Iterate through each aircraft item
          for(i=0; i<adsb.length;i++){
            var instance = adsb[i];
            // Full information needed to plot not available
            if(isNaN(instance.lat)  || isNaN(instance.lon) || isNaN(instance.altitude) || instance.lat==0  || instance.lon==0 || instance.altitude ==0){
              continue;
            }else{      
               //Clean previous, old and corrupt points
               CleanSlate(timestamp);
              lat = instance.lat;
              lon = instance.lon;
              alt = instance.altitude;
              tme = timestamp;
              hex = instance.hex;
              PrepareRoute(lat,lon, alt,tme,hex);
              DrawLines();   
            }  
          }
          //console.log(AIRCRAFT);
          setTimeout(ExecuteQuery,1000);                  
          
        });
      }                          

      $(document).ready(function(){setTimeout(ExecuteQuery,1000)});
                        });

